CREATE DATABASE Drive2_db;
\c Drive2_db;

--Create the Tables--
-- User Table
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(256) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,                
    first_name VARCHAR(50) NOT NULL,                -- User's first name
    middle_name VARCHAR(50),                         -- User's middle name (optional)
    last_name VARCHAR(50) NOT NULL,                 -- User's last name
    date_of_birth DATE NOT NULL,                     -- User's date of birth
    gender VARCHAR(30) CHECK (gender IN ('Male', 'Female', 'Non-Binary', 'Other', 'Prefer Not to Say')),  -- User's gender
    phone_number VARCHAR(30),                        -- User's phone number
    address VARCHAR(255) NOT NULL,                   -- User's address
    state VARCHAR(50) NOT NULL,                      -- User's state
    driver_license_number VARCHAR(20) NOT NULL,     -- User's driver license number
    has_car BOOLEAN NOT NULL,
    creation_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Automatically sets to the current time on creation
    update_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP -- Updates automatically on any change
);

INSERT INTO users (
    user_id, 
    username, 
    password, 
    email, 
    first_name, 
    last_name, 
    date_of_birth, 
    gender, 
    address, 
    state, 
    driver_license_number, 
    has_car, 
    creation_timestamp, 
    update_timestamp
) 
VALUES (
    -1,                           -- user_id set to -1
    'null_user',                 -- username
    'dummy_password',            -- password
    'nulluser@example.com',      -- email
    'NULL',                      -- first_name
    'User',                      -- last_name
    '1990-01-01',                -- date_of_birth
    'Prefer Not to Say',         -- gender
    'Unknown Address',           -- address
    'Unknown State',             -- state
    'NULLDRIVERNUM',             -- driver_license_number
    FALSE,                       -- has_car (FALSE for no car)
    CURRENT_TIMESTAMP,           -- creation_timestamp
    NULL                         -- update_timestamp
);

-- Car Model Information Table
CREATE TABLE car_models (
    model_id INT AUTO_INCREMENT PRIMARY KEY,
    model_name VARCHAR(100) UNIQUE NOT NULL,
    manufacturer VARCHAR(100),
    year_of_manufacture INT
);

-- Vehicle Data Table
CREATE TABLE vehicles (
    vehicle_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    car_model_id INT, 
    FOREIGN KEY (car_model_id) REFERENCES car_models(model_id),
    car_model VARCHAR(100),
    car_brand VARCHAR(100),
    car_year INT,
    license_plate VARCHAR(20) UNIQUE,
    garage_address VARCHAR(255) NOT NULL,
    creation_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Automatically sets to the current time on creation
    update_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP -- Updates automatically on any change
);

CREATE TABLE route (
    route_id INT AUTO_INCREMENT PRIMARY KEY, -- SALLY NEEDS --
    user_id INT,-- SALLY NEEDS --
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    start_latitude DECIMAL(9,6) NOT NULL,-- SALLY NEEDS --
    start_longitude DECIMAL(9,6) NOT NULL,-- SALLY NEEDS --
    start_point_name VARCHAR(100) NOT NULL,
    end_latitude DECIMAL(9,6) NOT NULL,-- SALLY NEEDS --
    end_longitude DECIMAL(9,6) NOT NULL,-- SALLY NEEDS --
    end_point_name VARCHAR(100) NOT NULL,
    google_actual_distance DECIMAL(10,2) NOT NULL, -- Distance from Google Maps API (in km or miles)
    home_departure_time VARCHAR(20), -- time leaving starting point (home)
    destination_arrival_time VARCHAR(20), -- time arriving ending point (office)-- SALLY NEEDS --
    destination_departure_time VARCHAR(20), -- time leaving ending point (office)-- SALLY NEEDS --
    home_arrival_time VARCHAR(20), -- time arriving starting point (home)
    travel_time INT,
    travel_day VARCHAR(9) NOT NULL,  -- etc 'Monday'-- SALLY NEEDS --
    weekly_mileage_percentage DECIMAL(5,2) NOT NULL CHECK (weekly_mileage_percentage >= 0 AND weekly_mileage_percentage <= 100),  -- Percentage of weekly travel mileage due to regular commute
    weekly_fuel_spent DECIMAL(10,2) NOT NULL,  -- Approximate amount spent on fuel weekly in currency units
    creation_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Automatically sets to the current time on creation
    update_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Updates automatically on any change 
    cluster_id INT DEFAULT NULL,
    polyline VARCHAR(5000)
);

CREATE TABLE matching_data (
    match_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id_person1 INT,
    user_id_person2 INT,
    FOREIGN KEY (user_id_person1) REFERENCES users(user_id),
    FOREIGN KEY (user_id_person2) REFERENCES users(user_id),
    person1_home_lat DECIMAL(9,6),
    person1_home_long DECIMAL(9,6),
    person1_destination_lat DECIMAL(9,6),
    person1_destination_long DECIMAL(9,6),
    person2_home_lat DECIMAL(9,6),
    person2_home_long DECIMAL(9,6),
    person2_destination_lat DECIMAL(9,6),
    person2_destination_long DECIMAL(9,6),
    distance_between_home DECIMAL(7,6),
    distance_between_destination DECIMAL(7,6),
    destination_arrival_diff DECIMAL(3,1),
    destination_departure_diff DECIMAL(3,1),
    matched_day VARCHAR(9),
    status VARCHAR(50), -- "active" if match is still ongoing, "unactive" if being unmatched
    status_info VARCHAR(200), -- "user_unmatched", "user_blocked", "algorithm_change" etc
    driver_id INT,
    match_type VARCHAR(50), -- "type_1" for end points proximity and "type_2" for route proximity
    match_quality VARCHAR(50), -- some metric to record quality of match, decide sort in website
    match_direction VARCHAR(6), -- "go" if from home, "return" if from office
    first_match_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- timestamp when the match is first made
    end_match_timestamp TIMESTAMP -- timestamp when unmatch happens (due to reason stated in status_info)

);

DELIMITER $$

CREATE TRIGGER update_end_match_timestamp
BEFORE UPDATE ON matching_data
FOR EACH ROW
BEGIN
    IF NEW.status = 'unactive' AND OLD.status != 'unactive' THEN
        SET NEW.end_match_timestamp = CURRENT_TIMESTAMP;
    ELSEIF NEW.status != 'unactive' THEN
        SET NEW.end_match_timestamp = NULL;
    END IF;
END $$

DELIMITER ;

